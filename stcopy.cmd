['[st.cmd] #!../../bin/linuxRT-x86_64/gmd', '[st.cmd] ', '[st.cmd] < envPaths', '[envPaths] epicsEnvSet("IOC","sioc-b084-gd01")', '[envPaths] epicsEnvSet("TOP","/afs/slac.stanford.edu/u/re/marcio/Work/playground/GMD/gmd-git")', '[envPaths] epicsEnvSet("EPICS_SITE_TOP","/afs/slac/g/lcls/epics")', '[envPaths] epicsEnvSet("BASE_SITE_TOP","/afs/slac/g/lcls/epics/base")', '[envPaths] epicsEnvSet("EPICS_MODULES","/afs/slac/g/lcls/epics/R7.0.3.1-1.0/modules")', '[envPaths] epicsEnvSet("IOC_SITE_TOP","/afs/slac/g/lcls/epics/iocTop")', '[envPaths] epicsEnvSet("PACKAGE_SITE_TOP","/afs/slac/g/lcls/package")', '[envPaths] epicsEnvSet("MATLAB_PACKAGE_TOP","/afs/slac/g/lcls/package/matlab")', '[envPaths] epicsEnvSet("PSPKG_ROOT","/afs/slac/g/lcls/pkg_mgr")', '[envPaths] epicsEnvSet("TOOLS_SITE_TOP","/afs/slac/g/lcls/tools")', '[envPaths] epicsEnvSet("ALARM_CONFIGS_TOP","/afs/slac/g/lcls/tools/AlarmConfigsTop")', '[envPaths] epicsEnvSet("AUTOSAVE","/afs/slac/g/lcls/epics/R7.0.3.1-1.0/modules/autosave/R5.8-2.1.0")', '[envPaths] epicsEnvSet("BLDCLIENT","/afs/slac/g/lcls/epics/R7.0.3.1-1.0/modules/bldClient/R2.18.0")', '[envPaths] epicsEnvSet("CALC","/afs/slac/g/lcls/epics/R7.0.3.1-1.0/modules/calc/R3.7-1.0.1")', '[envPaths] epicsEnvSet("HISTORY","/afs/slac/g/lcls/epics/R7.0.3.1-1.0/modules/history/R2.8.0")', '[envPaths] epicsEnvSet("IOCADMIN","/afs/slac/g/lcls/epics/R7.0.3.1-1.0/modules/iocAdmin/R3.1.16-1.3.2")', '[envPaths] epicsEnvSet("CAPUTLOG","/afs/slac/g/lcls/epics/R7.0.3.1-1.0/modules/caPutLog/R3.7-1.0.0")', '[envPaths] epicsEnvSet("CEXP","/afs/slac/g/lcls/epics/R7.0.3.1-1.0/modules/cexpsh/R1.1.2")', '[envPaths] epicsEnvSet("PVXS","/afs/slac/g/lcls/epics/R7.0.3.1-1.0/modules/pvxs/R0.3.1-0.0.1")', '[envPaths] epicsEnvSet("SNCSEQ","/afs/slac/g/lcls/epics/R7.0.3.1-1.0/modules/seq/R2.2.4-1.2")', '[envPaths] epicsEnvSet("SSCAN","/afs/slac/g/lcls/epics/R7.0.3.1-1.0/modules/sscan/R2.10.2-1.0.0")', '[envPaths] epicsEnvSet("YAMLLOADER","/afs/slac/g/lcls/epics/R7.0.3.1-1.0/modules/yamlLoader/R2.3.5")', '[envPaths] epicsEnvSet("YAMLDOWNLOADER","/afs/slac/g/lcls/epics/R7.0.3.1-1.0/modules/yamlDownloader/R1.2.3")', '[envPaths] epicsEnvSet("ASYN","/afs/slac/g/lcls/epics/R7.0.3.1-1.0/modules/asyn/R4.39-1.0.1")', '[envPaths] epicsEnvSet("YCPSWASYN","/afs/slac/g/lcls/epics/R7.0.3.1-1.0/modules/ycpswasyn/R3.3.6")', '[envPaths] epicsEnvSet("ATCACOMMON","/afs/slac/g/lcls/epics/R7.0.3.1-1.0/modules/ATCACommon/R2.0.0")', '[envPaths] epicsEnvSet("TIMING","/afs/slac/g/lcls/epics/R7.0.3.1-1.0/modules/timingApi/R0.6")', '[envPaths] epicsEnvSet("TPRPATTERN","/afs/slac/g/lcls/epics/R7.0.3.1-1.0/modules/tprPattern/R2.3.6")', '[envPaths] epicsEnvSet("TPRTRIGGER","/afs/slac/g/lcls/epics/R7.0.3.1-1.0/modules/tprTrigger/R2.6.3")', '[envPaths] epicsEnvSet("BSACORE","/afs/slac/g/lcls/epics/R7.0.3.1-1.0/modules/BsaCore/R1.5.5")', '[envPaths] epicsEnvSet("BSADRIVER","/afs/slac/g/lcls/epics/R7.0.3.1-1.0/modules/bsaDriver/R4.1.0")', '[envPaths] epicsEnvSet("EVENT","/afs/slac/g/lcls/epics/R7.0.3.1-1.0/modules/event/R4.8.4")', '[envPaths] epicsEnvSet("EPICS_BASE","/afs/slac/g/lcls/epics/base/R7.0.3.1-1.0")', '[st.cmd] ', '[st.cmd] epicsEnvSet( "ENGINEER", "Marcio Donadio" )', '[st.cmd] ', '[st.cmd] # Area and instrument names to be used in record names', '[st.cmd] epicsEnvSet("AREA", "EM1K0")', '[st.cmd] epicsEnvSet("LOCA", "FEES")', '[st.cmd] epicsEnvSet("POS", "GMD")', '[st.cmd] epicsEnvSet("INST", "HPS")', '[st.cmd] epicsEnvSet("EED_AREA", "FEES")', '[st.cmd] epicsEnvSet("IOC_UNIT", "GD01")', '[st.cmd] epicsEnvSet("IOC_INST", "0")', '[st.cmd] epicsEnvSet("P", "${AREA}:${POS}:${INST}")', '[st.cmd] # Global timing system for B084', '[st.cmd] epicsEnvSet("GLOBAL_MID_PV", "B084:2")', '[st.cmd] epicsEnvSet("Keithley1PV", "${P}:FakeKeithley1 CP MS")', '[st.cmd] epicsEnvSet("Keithley2PV", "${P}:FakeKeithley2 CP MS")', '[st.cmd] epicsEnvSet("TemperaturePV", "${P}:FakeTemperature")', '[st.cmd] epicsEnvSet("PressurePV", "${P}:FakePressure")', '[st.cmd] epicsEnvSet("GasTypePV", "${P}:FakeGasType.RVAL")', '[st.cmd] epicsEnvSet("EffectiveLength", "2.113")', '[st.cmd] epicsEnvSet("AVG_ENERGY_UPSTREAM_PV", "$(P):AvgPulseIntensity")', '[st.cmd] epicsEnvSet("AVG_ENERGY_DOWNSTREAM_PV", "EM2K0:XGMD:HPS:AvgPulseIntensity")', '[st.cmd] ', '[st.cmd] epicsEnvSet("FPGA_IP","10.1.1.102")', '[st.cmd] epicsEnvSet("PREAMP_IP", "192.168.3.46")', '[st.cmd] epicsEnvSet("GMD_STREAM_DRIVER", "atca_str1")', '[st.cmd] # Set multicast group for GMD', '[st.cmd] epicsEnvSet("BLD_IP", "239.255.25.2")', '[st.cmd] ', '[st.cmd] # This table provides the multiplication factor according to the attenuation', '[st.cmd] # dB selected at the pre-amplifiers. It follows this sequence:', '[st.cmd] # 0 dB - 3 dB - 6 dB - 9 dB - ..... - 84 dB - 87 dB - 90 dB', '[st.cmd] # The table was broken up in parts because it reached the macro substitution', '[st.cmd] # size limit.', '[st.cmd] epicsEnvSet("PRE_AMP_TABLE_1", "1 1.375 1.875 2.4791667 2.7708333 3.625 4.7916667 6.25 7.929859642730 10.272441767213 13.307052661080 17.238126488090 22.330489882894 28.927202660600 37.472668900490 48.542575339935 62.882673953401 81.459021402119 105.523059860784")', '[st.cmd] epicsEnvSet("PRE_AMP_TABLE_2", "136.695923554183 177.077650524757 229.388656955371 297.153004819388 384.935809142342 498.650778410038 645.958606352962 836.783053767436 1083.979487518050 1404.200914525760 1819.019853290480 2356.381620633280")', '[st.cmd] epicsEnvSet("PRE_AMP_TABLE_3", "") ', '[st.cmd] ', '[st.cmd] cd ${TOP}', '[st.cmd] ', '[st.cmd] < iocBoot/common/gmd_common.cmd', '[iocBoot/common/gmd_common.cmd] #!../../bin/linuxRT-x86_64/gmd', '[iocBoot/common/gmd_common.cmd] ', '[iocBoot/common/gmd_common.cmd] epicsEnvSet("IOC_NAME", "SIOC:${EED_AREA}:${IOC_UNIT}")', '[iocBoot/common/gmd_common.cmd] ', '[iocBoot/common/gmd_common.cmd] # iocAdmin environment variables', '[iocBoot/common/gmd_common.cmd] # the environment variable LOCATION must', '[iocBoot/common/gmd_common.cmd] # be defined upon entry.', '[iocBoot/common/gmd_common.cmd] epicsEnvSet("STARTUP"  ,"${EPICS_IOCS}/${IOC}")', '[iocBoot/common/gmd_common.cmd] epicsEnvSet("ST_CMD"   ,"startup.cmd")', '[iocBoot/common/gmd_common.cmd] ', '[iocBoot/common/gmd_common.cmd] # Define subsystem, used by iocLogPrefix', '[iocBoot/common/gmd_common.cmd] epicsEnvSet("SUBSYS","gmd")', '[iocBoot/common/gmd_common.cmd] ', '[iocBoot/common/gmd_common.cmd] # YAML directory', '[iocBoot/common/gmd_common.cmd] epicsEnvSet("YAML_DIR","${IOC_DATA}/${IOC}/yaml")', '[iocBoot/common/gmd_common.cmd] # Yaml File', '[iocBoot/common/gmd_common.cmd] epicsEnvSet("TOP_YAML","${YAML_DIR}/000TopLevel.yaml")', '[iocBoot/common/gmd_common.cmd] epicsEnvSet("YAML_CONFIG_FILE", "${YAML_DIR}/config/defaults_gg.yaml")', '[iocBoot/common/gmd_common.cmd] # Dictionary file for manually defined records', '[iocBoot/common/gmd_common.cmd] epicsEnvSet("DICT_FILE", "yaml/gmd.dict")', '[iocBoot/common/gmd_common.cmd] ', '[iocBoot/common/gmd_common.cmd] # Pre-amp channel related to electron signal', '[iocBoot/common/gmd_common.cmd] epicsEnvSet("ELEC_PREAMP_CH", "2")', '[iocBoot/common/gmd_common.cmd] ', '[iocBoot/common/gmd_common.cmd] # Register all support components', '[iocBoot/common/gmd_common.cmd] dbLoadDatabase("dbd/gmd.dbd")', '[iocBoot/common/gmd_common.cmd] gmd_registerRecordDeviceDriver(pdbbase)', '[iocBoot/common/gmd_common.cmd] ', '[iocBoot/common/gmd_common.cmd] # ===========================================', '[iocBoot/common/gmd_common.cmd] #              DRIVER SETUP', '[iocBoot/common/gmd_common.cmd] # ===========================================', '[iocBoot/common/gmd_common.cmd] ', '[iocBoot/common/gmd_common.cmd] ## Yaml Downloader', '[iocBoot/common/gmd_common.cmd] DownloadYamlFile("${FPGA_IP}", "${YAML_DIR}")', '[iocBoot/common/gmd_common.cmd] ', '[iocBoot/common/gmd_common.cmd] # Load yaml files', '[iocBoot/common/gmd_common.cmd] cpswLoadYamlFile("${TOP_YAML}", "NetIODev", "", "${FPGA_IP}")', '[iocBoot/common/gmd_common.cmd] ', '[iocBoot/common/gmd_common.cmd] # Load configuration to disable BSA/BLD/BSSS/BSAS on boot', '[iocBoot/common/gmd_common.cmd] cpswLoadConfigFile("${YAML_DIR}/config/disable_bld_bsss_bsas.yaml", "mmio/AmcCarrierCore/AmcCarrierBsa")', '[iocBoot/common/gmd_common.cmd] ', '[iocBoot/common/gmd_common.cmd] cpswLoadConfigFile("${YAML_CONFIG_FILE}", "mmio", "")', '[iocBoot/common/gmd_common.cmd] ', '[iocBoot/common/gmd_common.cmd] # Load specific AMC card IOC configurations to firmware', '[iocBoot/common/gmd_common.cmd] cpswLoadConfigFile("${TOP}/iocBoot/${IOC}/config_AMC.yaml", "mmio", "")', '[iocBoot/common/gmd_common.cmd] ', '[iocBoot/common/gmd_common.cmd] # Configure BSA before Amplifier overwrites tree', '[iocBoot/common/gmd_common.cmd] < iocBoot/common/gmd_bsa.cmd', '[iocBoot/common/gmd_bsa.cmd] ', '[iocBoot/common/gmd_bsa.cmd] ', '[iocBoot/common/gmd_bsa.cmd] #Order is important - diagnostic bus', '[iocBoot/common/gmd_bsa.cmd] # 0: Status  AMC-0', '[iocBoot/common/gmd_bsa.cmd] # 1: Status  AMC-1', '[iocBoot/common/gmd_bsa.cmd] # 2: TMIT    AMC-0', '[iocBoot/common/gmd_bsa.cmd] # 3: TMIT    AMC-1', '[iocBoot/common/gmd_bsa.cmd] # 4: X       AMC-0', '[iocBoot/common/gmd_bsa.cmd] # 5: X       AMC-1', '[iocBoot/common/gmd_bsa.cmd] # 6: Y       AMC-0', '[iocBoot/common/gmd_bsa.cmd] # 7: Y       AMC-1', '[iocBoot/common/gmd_bsa.cmd] # 8: TMIT-fp AMC-0', '[iocBoot/common/gmd_bsa.cmd] # 9: TMIT-fp AMC-1', '[iocBoot/common/gmd_bsa.cmd] #10: X-fp    AMC-0', '[iocBoot/common/gmd_bsa.cmd] #11: X-fp    AMC-1', '[iocBoot/common/gmd_bsa.cmd] #12: Y-fp    AMC-0', '[iocBoot/common/gmd_bsa.cmd] #13: Y-fp    AMC-1', '[iocBoot/common/gmd_bsa.cmd] #14:', '[iocBoot/common/gmd_bsa.cmd] #15:', '[iocBoot/common/gmd_bsa.cmd] #16: RMS raw chan A AMC-0', '[iocBoot/common/gmd_bsa.cmd] #17: RMS raw chan A AMC-1', '[iocBoot/common/gmd_bsa.cmd] #18: RMS raw chan B AMC-0', '[iocBoot/common/gmd_bsa.cmd] #19: RMS raw chan B AMC-1', '[iocBoot/common/gmd_bsa.cmd] #20: RMS raw chan C AMC-0', '[iocBoot/common/gmd_bsa.cmd] #21: RMS raw chan C AMC-1', '[iocBoot/common/gmd_bsa.cmd] #22: RMS raw chan D AMC-0', '[iocBoot/common/gmd_bsa.cmd] #23: RMS raw chan D AMC-1', '[iocBoot/common/gmd_bsa.cmd] ', '[iocBoot/common/gmd_bsa.cmd] ', '[iocBoot/common/gmd_bsa.cmd] # add BSA - must be in the same order as in the diagnostic bus', '[iocBoot/common/gmd_bsa.cmd] #bsaAdd(<KEY>,       <TYPE>,  <DO NOT TOUCH - OPTIONAL>)', '[iocBoot/common/gmd_bsa.cmd] bsaAdd("STATUSAMC0",       "uint32", "1")', '[iocBoot/common/gmd_bsa.cmd] bsaAdd("STATUSAMC1",       "uint32", "1")', '[iocBoot/common/gmd_bsa.cmd] bsaAdd("ENERGYAMC0",       "int32")', '[iocBoot/common/gmd_bsa.cmd] bsaAdd("ENERGYAMC1",       "int32") ', '[iocBoot/common/gmd_bsa.cmd] bsaAdd("XFIXEDPAMC0",      "int32")', '[iocBoot/common/gmd_bsa.cmd] bsaAdd("XFIXEDPAMC1",      "int32")', '[iocBoot/common/gmd_bsa.cmd] bsaAdd("YFIXEDPAMC0",      "int32")', '[iocBoot/common/gmd_bsa.cmd] bsaAdd("YFIXEDPAMC1",      "int32")', '[iocBoot/common/gmd_bsa.cmd] bsaAdd("ENERGYFPAMC0",     "float32")', '[iocBoot/common/gmd_bsa.cmd] bsaAdd("ENERGYFPAMC1",     "float32")', '[iocBoot/common/gmd_bsa.cmd] bsaAdd("XFLOATPAMC0",      "float32")', '[iocBoot/common/gmd_bsa.cmd] bsaAdd("XFLOATPAMC1",      "float32")', '[iocBoot/common/gmd_bsa.cmd] bsaAdd("YFLOATPAMC0",      "float32")', '[iocBoot/common/gmd_bsa.cmd] bsaAdd("YFLOATPAMC1",      "float32")', '[iocBoot/common/gmd_bsa.cmd] bsaAdd("TDIFAMC0",         "int32")', '[iocBoot/common/gmd_bsa.cmd] bsaAdd("TDIFAMC1",         "int32")', '[iocBoot/common/gmd_bsa.cmd] bsaAdd("RMSAAMC0",      "int32")', '[iocBoot/common/gmd_bsa.cmd] bsaAdd("RMSAAMC1",      "int32")', '[iocBoot/common/gmd_bsa.cmd] bsaAdd("RMSBAMC0",      "int32")', '[iocBoot/common/gmd_bsa.cmd] bsaAdd("RMSBAMC1",      "int32")', '[iocBoot/common/gmd_bsa.cmd] bsaAdd("RMSCAMC0",      "int32")', '[iocBoot/common/gmd_bsa.cmd] bsaAdd("RMSCAMC1",      "int32")', '[iocBoot/common/gmd_bsa.cmd] bsaAdd("RMSDAMC0",      "int32")', '[iocBoot/common/gmd_bsa.cmd] bsaAdd("RMSDAMC1",      "int32")', '[iocBoot/common/gmd_bsa.cmd] ', '[iocBoot/common/gmd_bsa.cmd] bsaAsynDriverConfigure("bsaPort", "mmio/AmcCarrierCore/AmcCarrierBsa", "BsaRam/dram")', '[iocBoot/common/gmd_bsa.cmd] ', '[iocBoot/common/gmd_bsa.cmd] #  Initialize BSSS driver', '[iocBoot/common/gmd_bsa.cmd] #  make assoication with BSA channels: bsssAssociateBsaChannels(<BSA port name>)', '[iocBoot/common/gmd_bsa.cmd] bsssAssociateBsaChannels("bsaPort")                       ', '[iocBoot/common/gmd_bsa.cmd] # confiugre BSSS driver: bsssAsynDriverConfigure(<bsss port>, <register path>)', '[iocBoot/common/gmd_bsa.cmd] bsssAsynDriverConfigure("bsssPort", "mmio/AmcCarrierCore/AmcCarrierBsa/Bsss")', '[iocBoot/common/gmd_bsa.cmd] # GLOBAL is defined in IOC st.cmd depending if it is in dev or prod', '[iocBoot/common/gmd_bsa.cmd] dbLoadRecords("db/bsssCtrl.db", "DEV=${P},PORT=bsssPort,GLOBAL=BSSS:${GLOBAL_MID_PV}")', '[iocBoot/common/gmd_bsa.cmd] ', '[iocBoot/common/gmd_bsa.cmd] # configure Bld driver: bldAsynDriverConfigure(<bsss port>, <register path>)', '[iocBoot/common/gmd_bsa.cmd] bldAssociateBsaChannels("bsaPort")', '[iocBoot/common/gmd_bsa.cmd] bldAsynDriverConfigure("bldPort", "mmio/AmcCarrierCore/AmcCarrierBsa/Bld", "${P}")', '[iocBoot/common/gmd_bsa.cmd] bldChannelName("ENERGYAMC1",    "milliJoulesPerPulse")', '[iocBoot/common/gmd_bsa.cmd] bldChannelName("YFIXEDPAMC1",   "POSY")', '[iocBoot/common/gmd_bsa.cmd] bldChannelName("RMSAAMC1",      "RMS_E1")', '[iocBoot/common/gmd_bsa.cmd] bldChannelName("RMSBAMC1",      "RMS_E2")', '[iocBoot/common/gmd_bsa.cmd] # GLOBAL is defined in IOC st.cmd depending if it is in dev or prod', '[iocBoot/common/gmd_bsa.cmd] dbLoadRecords("db/bldCtrl.db", "DEV=${P},PORT=bldPort,GLOBAL=BLD:${GLOBAL_MID_PV}")', '[iocBoot/common/gmd_bsa.cmd] ', '[iocBoot/common/gmd_bsa.cmd] #NC BLD control (implemented in the IOC)', '[iocBoot/common/gmd_bsa.cmd] dbLoadRecords("db/NCBldCtrl.db", "DEV=${P}, LOCA=${LOCA}, IOC_UNIT=${POS}, INST=0, PORT=${GMD_STREAM_DRIVER}")', '[iocBoot/common/gmd_bsa.cmd] ', '[iocBoot/common/gmd_bsa.cmd] # BSAS', '[iocBoot/common/gmd_bsa.cmd] bsasAssociateBsaChannels("bsaPort")', '[iocBoot/common/gmd_bsa.cmd] bsasBaseName("ENERGYAMC1",    "${P}:milliJoulesPerPulse")', '[iocBoot/common/gmd_bsa.cmd] bsasBaseName("YFIXEDPAMC1",    "${P}:POSY")', "[iocBoot/common/gmd_bsa.cmd] # If needed for testing purposes in DEV, uncomment the lines below and don't forget", '[iocBoot/common/gmd_bsa.cmd] # to uncomment the BSAS database for these signals in iocBoot/<ioc>/st.cmd, too.', '[iocBoot/common/gmd_bsa.cmd] #bsasBaseName("RMSAAMC1",    "${P}:RMS_E1")', '[iocBoot/common/gmd_bsa.cmd] #bsasBaseName("RMSBAMC1",    "${P}:RMS_E2")', '[iocBoot/common/gmd_bsa.cmd] bsasAsynDriverConfigure("bsasPort", "mmio/AmcCarrierCore/AmcCarrierBsa/Bsas", "${P}:SC_DIAG0", "${P}:SC_BSYD", "${P}:SC_HXR","${P}:SC_SXR" )', '[iocBoot/common/gmd_bsa.cmd] # GLOBAL is defined in IOC st.cmd depending if it is in dev or prod', '[iocBoot/common/gmd_bsa.cmd] dbLoadRecords("db/bsasCtrl.db", "DEV=${P},AREA=${EED_AREA},IOC_UNIT=${IOC_UNIT},IOC_INST=${IOC_INST},PORT=bsasPort,GLOBAL=BSAS:${GLOBAL_MID_PV}")', '[iocBoot/common/gmd_common.cmd] ', '[iocBoot/common/gmd_common.cmd] ', '[iocBoot/common/gmd_common.cmd] # Driver setup for YCPSWAsyn', '[iocBoot/common/gmd_common.cmd] # YCPSWASYNConfig(', '[iocBoot/common/gmd_common.cmd] #    Port Name,                 # the name given to this port driver', '[iocBoot/common/gmd_common.cmd] #    Root Path                  # OPTIONAL: Root path to start the generation. If empty, the Yaml root will be used', '[iocBoot/common/gmd_common.cmd] #    Record name Prefix,        # Record name prefix', '[iocBoot/common/gmd_common.cmd] #    Use DB Autogeneration,     # Set to 1 for autogeneration of records from the YAML definition. Set to 0 to disable it', '[iocBoot/common/gmd_common.cmd] #    Load dictionary,           # Dictionary file path with registers to load. An empty string will disable this function', '[iocBoot/common/gmd_common.cmd] YCPSWASYNConfig("cpsw", "", "", "0", "${DICT_FILE}")', '[iocBoot/common/gmd_common.cmd] ', '[iocBoot/common/gmd_common.cmd] # Load drivers for TPR trigger, pattern, and crossbar control', '[iocBoot/common/gmd_common.cmd] crossbarControlAsynDriverConfigure("crossbar", "mmio/AmcCarrierCore/AxiSy56040")', '[iocBoot/common/gmd_common.cmd] tprTriggerAsynDriverConfigure("trig", "mmio/AmcCarrierCore")', '[iocBoot/common/gmd_common.cmd] tprPatternAsynDriverConfigure("pattern", "mmio/AmcCarrierCore", "Lcls1TimingStream")', '[iocBoot/common/gmd_common.cmd] ', '[iocBoot/common/gmd_common.cmd] # LCLS1 mode GMD. There is only one AMC card on the second position.', '[iocBoot/common/gmd_common.cmd] cpswATCACommonAsynDriverConfigure("atca", "mmio", "")', '[iocBoot/common/gmd_common.cmd] # BPM_B_Stream contains BSA data together with waveform', '[iocBoot/common/gmd_common.cmd] #cpswDebugStreamAsynDriverConfigure("atca_str0", 0x4000, "header_enabled", "Stream4", "Stream5", "Stream6", "Stream7")', '[iocBoot/common/gmd_common.cmd] scopeAdvancedAsynDriverConfigure("atca_str0", 1, "int16", "int16", "int16", "int16")', '[iocBoot/common/gmd_common.cmd] gmdDebugStreamConfigure("${GMD_STREAM_DRIVER}")', '[iocBoot/common/gmd_common.cmd] ', '[iocBoot/common/gmd_common.cmd] # Manually created yCPSWasyn records', '[iocBoot/common/gmd_common.cmd] dbLoadRecords("db/gmd_cpsw.db", "P=${P}, PORT=cpsw, AMC=1")', '[iocBoot/common/gmd_common.cmd] dbLoadRecords("db/gmd-firmwareEquation.db", "P=${P},ELEC_PREAMP_CH=$(ELEC_PREAMP_CH)")', '[iocBoot/common/gmd_common.cmd] ', '[iocBoot/common/gmd_common.cmd] # Timing crossbar, pattern, and trigger', '[iocBoot/common/gmd_common.cmd] dbLoadRecords("db/tprTrig.db",     "LOCA=${LOCA}, IOC_UNIT=${IOC_UNIT}, INST=0, PORT=trig")', '[iocBoot/common/gmd_common.cmd] dbLoadRecords("db/tprPattern.db",  "LOCA=${LOCA}, IOC_UNIT=${IOC_UNIT}, INST=0, PORT=pattern")', '[iocBoot/common/gmd_common.cmd] ', '[iocBoot/common/gmd_common.cmd] # GMD specific databases', '[iocBoot/common/gmd_common.cmd] dbLoadRecords("db/gmd-streamData.db", "P=${P}, PORT=${GMD_STREAM_DRIVER}")', '[iocBoot/common/gmd_common.cmd] ', '[iocBoot/common/gmd_common.cmd] # ATCA common features', '[iocBoot/common/gmd_common.cmd] #dbLoadRecords("db/ATCACommonDeprecated.db", "DEV=${P},PORT=atca")', '[iocBoot/common/gmd_common.cmd] dbLoadRecords("db/ATCACommon.db", "DEV=${P},PORT=atca")', '[iocBoot/common/gmd_common.cmd] dbLoadRecords("db/crossbarCtrl.db", "DEV=$(P), PORT=crossbar")', '[iocBoot/common/gmd_common.cmd] dbLoadRecords("db/Stream.db", "DEV=${P}:STR0, PORT=atca_str0, TSE=-2")', '[iocBoot/common/gmd_common.cmd] dbLoadRecords("db/Stream.db", "DEV=${P}:STR1, PORT=${GMD_STREAM_DRIVER}, TSE=-2")', '[iocBoot/common/gmd_common.cmd] ', '[iocBoot/common/gmd_common.cmd] # Load database to support IOC Health and monitoring', '[iocBoot/common/gmd_common.cmd] dbLoadRecords( "db/iocAdminSoft.db",            "IOC=$(IOC_NAME)" )', '[iocBoot/common/gmd_common.cmd] dbLoadRecords( "db/save_restoreStatus.db",      "P=$(IOC_NAME):" )', '[iocBoot/common/gmd_common.cmd] ', '[iocBoot/common/gmd_common.cmd] # The following database is a result of a python parser', '[iocBoot/common/gmd_common.cmd] # which looks at RELEASE_SITE and RELEASE to discover', '[iocBoot/common/gmd_common.cmd] # versions of software your IOC is referencing.', '[iocBoot/common/gmd_common.cmd] # The python parser is part of iocAdmin.', '[iocBoot/common/gmd_common.cmd] dbLoadRecords("db/iocRelease.db","IOC=${IOC_NAME}")', '[iocBoot/common/gmd_common.cmd] ', '[iocBoot/common/gmd_common.cmd] # Load sequence admin', '[iocBoot/common/gmd_common.cmd] dbLoadRecords("db/devSeqCar.db","SIOC=${IOC_NAME}")', '[iocBoot/common/gmd_common.cmd] ', '[iocBoot/common/gmd_common.cmd] # BLD', '[iocBoot/common/gmd_common.cmd] dbLoadRecords( "db/gmd-process.db",             "P=$(P),SIG_LEN=2000,ACQ=$(IOC_NAME):ACQ:01,ACQ_CH=$(IOC_NAME):ACQ:01:CH1,Keithley1PV=$(Keithley1PV),Keithley2PV=$(Keithley2PV),TemperaturePV=$(TemperaturePV),PressurePV=$(PressurePV),GasTypePV=$(GasTypePV),EffectiveLength=$(EffectiveLength),AVG_ENERGY_UPSTREAM_PV=$(AVG_ENERGY_UPSTREAM_PV),AVG_ENERGY_DOWNSTREAM_PV=$(AVG_ENERGY_DOWNSTREAM_PV),TPR=TPR:$(EED_AREA):$(IOC_UNIT):0" )', '[iocBoot/common/gmd_common.cmd] dbLoadRecords( "db/process-hist.db",            "P=$(P),TemperaturePV=$(TemperaturePV)" )', '[iocBoot/common/gmd_common.cmd] ', '[iocBoot/common/gmd_common.cmd] #var DEBUG_GMD_INTERP 0', '[iocBoot/common/gmd_common.cmd] #var DEBUG_GMD_SUBRECORD 3', '[iocBoot/common/gmd_common.cmd] ', '[iocBoot/common/gmd_common.cmd] # Setup autosave', '[iocBoot/common/gmd_common.cmd] save_restoreSet_IncompleteSetsOk( 1 )', '[iocBoot/common/gmd_common.cmd] save_restoreSet_DatedBackupFiles( 1 )', '[iocBoot/common/gmd_common.cmd] ', '[iocBoot/common/gmd_common.cmd] set_pass1_restoreFile( "${IOC}.sav" )', '[iocBoot/common/gmd_common.cmd] set_pass0_restoreFile("info_positions.sav")', '[iocBoot/common/gmd_common.cmd] set_pass1_restoreFile("info_settings.sav")', '[iocBoot/common/gmd_common.cmd] ', '[iocBoot/common/gmd_common.cmd] # Specify where request and save_restore files can be found', '[iocBoot/common/gmd_common.cmd] set_requestfile_path("${IOC_DATA}/${IOC}/autosave-req")', '[iocBoot/common/gmd_common.cmd] set_requestfile_path( "${TOP}/autosave" )', '[iocBoot/common/gmd_common.cmd] set_savefile_path("${IOC_DATA}/${IOC}/autosave")', '[iocBoot/common/gmd_common.cmd] ', '[iocBoot/common/gmd_common.cmd] # Status-PV prefix, so save_restore can find its status PVs.', '[iocBoot/common/gmd_common.cmd] save_restoreSet_status_prefix("${P}:")', '[iocBoot/common/gmd_common.cmd] ', '[iocBoot/common/gmd_common.cmd] #==============================================================', '[iocBoot/common/gmd_common.cmd] # Update archive pv list in the data area', '[iocBoot/common/gmd_common.cmd] #==============================================================', '[iocBoot/common/gmd_common.cmd] # TODO: define PVs to be archived', '[iocBoot/common/gmd_common.cmd] #system("cp archive/${IOC}.arConfig  ${IOC_DATA}/${IOC}/archive/E${IOC}.archive")', '[iocBoot/common/gmd_common.cmd] ', '[iocBoot/common/gmd_common.cmd] #==============================================================', '[iocBoot/common/gmd_common.cmd] #  Load Channe Access Security if configuration file exists', '[iocBoot/common/gmd_common.cmd] #==============================================================', '[iocBoot/common/gmd_common.cmd] < ${ACF_INIT}', '[iocBoot/common/gmd_common.cmd] ', '[iocBoot/common/gmd_common.cmd] #==============================================================', '[iocBoot/common/gmd_common.cmd] # Start IOC Log Client', '[iocBoot/common/gmd_common.cmd] #==============================================================', '[iocBoot/common/gmd_common.cmd] < ${LOG_INIT}', '[iocBoot/common/gmd_common.cmd] ', '[st.cmd] ', '[st.cmd] # Use only for tests in the lab', '[st.cmd] dbLoadRecords( "db/test_only.db", "P=${P}")', '[st.cmd] ', '[st.cmd] # BSA', '[st.cmd] # gmdBsaConfigure("stream port name", "PhotonEN PV name", "PosX PV name (optional)", "PosY PV name (optional)")', '[st.cmd] gmdBsaConfigure("${GMD_STREAM_DRIVER}", "$(P):milliJoulesPerPulse")', '[st.cmd] dbLoadRecords("db/Bsa.db", "DEVICE=${P}, ATRB=milliJoulesPerPulse, LNK=${P}:EFmilliJoulesPerPulse, SINK_SIZE=1")', '[st.cmd] ', '[st.cmd] ########## IMPORTANT NOTE: RMS channels are for BLD only, but we are adding them', "[st.cmd] #                          on the dev IOCs for testing purposes. They shouldn't", '[st.cmd] #                          be added in prod IOCs.', '[st.cmd] ', '[st.cmd] # BSA SC', '[st.cmd] dbLoadRecords("db/bsa.db", "DEV=${P},PORT=bsaPort,BSAKEY=ENERGYAMC1,SECN=milliJoulesPerPulse")', '[st.cmd] dbLoadRecords("db/bsa.db", "DEV=${P},PORT=bsaPort,BSAKEY=RMSAAMC1,SECN=RMS_E1")', '[st.cmd] ', '[st.cmd] # BSSS ', '[st.cmd] dbLoadRecords("db/bsss.db", "DEV=${P},PORT=bsssPort,BSAKEY=ENERGYAMC1,SECN=milliJoulesPerPulse,DESC=mJPerPulse")', '[st.cmd] dbLoadRecords("db/bsss.db", "DEV=${P},PORT=bsssPort,BSAKEY=RMSAAMC1,SECN=RMS_E1")', '[st.cmd] ', '[st.cmd] # BSAS', '[st.cmd] dbLoadRecords("db/bsas.db", "DEV=${P},PORT=bsasPort,BSAKEY=ENERGYAMC1,SECN=milliJoulesPerPulse,DESC=mJPerPulse")', "[st.cmd] # If needed for testing purposes in DEV, uncomment the line below and don't forget", '[st.cmd] # to uncomment this BSAS signals in iocBoot/common/gmd_bsa.cmd, too.', '[st.cmd] #dbLoadRecords("db/bsas.db", "DEV=${P},PORT=bsasPort,BSAKEY=RMSAAMC1,SECN=RMS_E1")', '[st.cmd] ', '[st.cmd] #BLD', '[st.cmd] dbLoadRecords("db/bld.db", "DEV=${P},PORT=bldPort,BSAKEY=ENERGYAMC1,SECN=milliJoulesPerPulse,DESC=mJPerPulse")', '[st.cmd] dbLoadRecords("db/bld.db", "DEV=${P},PORT=bldPort,BSAKEY=RMSAAMC1,SECN=RMS_E1")', '[st.cmd] ', '[st.cmd] < iocBoot/common/gmd_init.cmd', '[iocBoot/common/gmd_init.cmd] # Increase the callback queue size for the record processing', '[iocBoot/common/gmd_init.cmd] callbackSetQueueSize(12000)', '[iocBoot/common/gmd_init.cmd] ', '[iocBoot/common/gmd_init.cmd] # Initialize the IOC and start processing records', '[iocBoot/common/gmd_init.cmd] iocInit()', '[iocBoot/common/gmd_init.cmd] ', '[iocBoot/common/gmd_init.cmd] # Initialize caPutLog', '[iocBoot/common/gmd_init.cmd] caPutLogInit("${EPICS_CA_PUT_LOG_ADDR}")', '[iocBoot/common/gmd_init.cmd] ', '[iocBoot/common/gmd_init.cmd] # Generate the autosave PV list', '[iocBoot/common/gmd_init.cmd] # Note we need change directory to', '[iocBoot/common/gmd_init.cmd] # where we are saving the restore', '[iocBoot/common/gmd_init.cmd] # request file.', '[iocBoot/common/gmd_init.cmd] cd("${IOC_DATA}/${IOC}/autosave-req")', '[iocBoot/common/gmd_init.cmd] makeAutosaveFiles()', '[iocBoot/common/gmd_init.cmd] ', '[iocBoot/common/gmd_init.cmd] # Start the save_restore task', '[iocBoot/common/gmd_init.cmd] # save changes on change, but no faster', '[iocBoot/common/gmd_init.cmd] # than every 5 seconds.', '[iocBoot/common/gmd_init.cmd] # Note: the last arg cannot be set to 0', '[iocBoot/common/gmd_init.cmd] create_monitor_set("info_positions.req", 5 )', '[iocBoot/common/gmd_init.cmd] create_monitor_set("info_settings.req" , 5 )', '[iocBoot/common/gmd_init.cmd] create_monitor_set("${IOC}.req",60,"")', '[iocBoot/common/gmd_init.cmd] ', '[iocBoot/common/gmd_init.cmd] # change directory to TOP of application', '[iocBoot/common/gmd_init.cmd] cd("${TOP}")', '[iocBoot/common/gmd_init.cmd] ', '[iocBoot/common/gmd_init.cmd] #DAQMUX configurations', '[iocBoot/common/gmd_init.cmd] dbpf ${P}:DAQMUX1_AUTOREARM 1', '[iocBoot/common/gmd_init.cmd] ', '[iocBoot/common/gmd_init.cmd] #STREAM CONFIGURATIONS', '[iocBoot/common/gmd_init.cmd] dbpf ${P}:STR0:STREAM_TYPE0 3', '[iocBoot/common/gmd_init.cmd] ', '[iocBoot/common/gmd_init.cmd] #Diagnostic bus trigger delay (ns).', '[iocBoot/common/gmd_init.cmd] dbpf TPR:${EED_AREA}:${IOC_UNIT}:${IOC_INST}:TRG11_SYS2_TDES 800', '[iocBoot/common/gmd_init.cmd] ', '[iocBoot/common/gmd_init.cmd] # Load the 31 position array in the preamp table', '[iocBoot/common/gmd_init.cmd] system("caput -a ${P}:PreAmpTable 31 ${PRE_AMP_TABLE_1} ${PRE_AMP_TABLE_2} ${PRE_AMP_TABLE_3}")', '[st.cmd] ', '[st.cmd] < iocBoot/common/gmd_bld.cmd', '[iocBoot/common/gmd_bld.cmd] epicsEnvSet( "BLD_ID",   "0" )', '[iocBoot/common/gmd_bld.cmd] epicsEnvSet( "BLD_PORT", "10148" )', '[iocBoot/common/gmd_bld.cmd] epicsEnvSet( "BLD_MAX_SIZE", "50" )', '[iocBoot/common/gmd_bld.cmd]  ', '[iocBoot/common/gmd_bld.cmd] BldSetDebugLevel( 1 )', '[iocBoot/common/gmd_bld.cmd] ', '[iocBoot/common/gmd_bld.cmd] BldSetID ("$(BLD_ID)")', '[iocBoot/common/gmd_bld.cmd] ', '[iocBoot/common/gmd_bld.cmd] BldConfigSend ("$(BLD_IP)", $(BLD_PORT), $(BLD_MAX_SIZE))', '[iocBoot/common/gmd_bld.cmd] gmdBldConfigure ("${GMD_STREAM_DRIVER}", "$(BLD_ID)")', '[iocBoot/common/gmd_bld.cmd] ', '[iocBoot/common/gmd_bld.cmd] BldStart()', '[iocBoot/common/gmd_bld.cmd] BldIsStarted()', '[iocBoot/common/gmd_bld.cmd] BldShowConfig()', '[st.cmd] ', '[st.cmd] < iocBoot/common/gmd_dbpf.cmd', "[iocBoot/common/gmd_dbpf.cmd] # Unfortunatelly autosave doesn't force records to send monitors. We need to", '[iocBoot/common/gmd_dbpf.cmd] # use dbpf once on the records that process only based on ILINK with CP.', '[iocBoot/common/gmd_dbpf.cmd] # PINI=YES is not helping with this.', '[iocBoot/common/gmd_dbpf.cmd] ', '[iocBoot/common/gmd_dbpf.cmd] dbpf ${P}:BeamRate.PROC 1', '[iocBoot/common/gmd_dbpf.cmd] dbpf ${P}:NumSamples.PROC 1', '[iocBoot/common/gmd_dbpf.cmd] dbpf ${P}:PulseSeedFactor.PROC 1', '[iocBoot/common/gmd_dbpf.cmd] dbpf ${P}:PulseAutoScale.PROC 1', '[iocBoot/common/gmd_dbpf.cmd] dbpf ${P}:MaxEn.PROC 1', '[iocBoot/common/gmd_dbpf.cmd] dbpf ${P}:RunningAvgDisCycleNum.PROC 1', '[iocBoot/common/gmd_dbpf.cmd] dbpf ${P}:BLD_LOCAL.PROC 1', '[iocBoot/common/gmd_dbpf.cmd] dbpf ${P}:BLD1_ACQ.PROC 1', '[iocBoot/common/gmd_dbpf.cmd] dbpf ${P}:BLD2_ACQ.PROC 1', '[iocBoot/common/gmd_dbpf.cmd] dbpf ${P}:BLD3_ACQ.PROC 1', '[iocBoot/common/gmd_dbpf.cmd] dbpf ${P}:BLD4_ACQ.PROC 1', '[iocBoot/common/gmd_dbpf.cmd] dbpf ${P}:BLD1_DESTMODE.PROC 1', '[iocBoot/common/gmd_dbpf.cmd] dbpf ${P}:BLD2_DESTMODE.PROC 1', '[iocBoot/common/gmd_dbpf.cmd] dbpf ${P}:BLD3_DESTMODE.PROC 1', '[iocBoot/common/gmd_dbpf.cmd] dbpf ${P}:BLD4_DESTMODE.PROC 1', '[iocBoot/common/gmd_dbpf.cmd] dbpf ${P}:BLD1_DESTMASK.PROC 1', '[iocBoot/common/gmd_dbpf.cmd] dbpf ${P}:BLD2_DESTMASK.PROC 1', '[iocBoot/common/gmd_dbpf.cmd] dbpf ${P}:BLD3_DESTMASK.PROC 1', '[iocBoot/common/gmd_dbpf.cmd] dbpf ${P}:BLD4_DESTMASK.PROC 1', '[iocBoot/common/gmd_dbpf.cmd] dbpf ${P}:BLD1_RATEMODE.PROC 1', '[iocBoot/common/gmd_dbpf.cmd] dbpf ${P}:BLD2_RATEMODE.PROC 1', '[iocBoot/common/gmd_dbpf.cmd] dbpf ${P}:BLD3_RATEMODE.PROC 1', '[iocBoot/common/gmd_dbpf.cmd] dbpf ${P}:BLD4_RATEMODE.PROC 1', '[iocBoot/common/gmd_dbpf.cmd] dbpf ${P}:BLD1_FIXEDRATE.PROC 1', '[iocBoot/common/gmd_dbpf.cmd] dbpf ${P}:BLD2_FIXEDRATE.PROC 1', '[iocBoot/common/gmd_dbpf.cmd] dbpf ${P}:BLD3_FIXEDRATE.PROC 1', '[iocBoot/common/gmd_dbpf.cmd] dbpf ${P}:BLD4_FIXEDRATE.PROC 1', '[iocBoot/common/gmd_dbpf.cmd] dbpf ${P}:AMP_PREATTN1.PROC 1', '[iocBoot/common/gmd_dbpf.cmd] dbpf ${P}:AMP_PREATTN2.PROC 1', '[iocBoot/common/gmd_dbpf.cmd] dbpf ${P}:AMP_PREATTN3.PROC 1', '[iocBoot/common/gmd_dbpf.cmd] dbpf ${P}:AMP_PREATTN4.PROC 1', '[iocBoot/common/gmd_dbpf.cmd] dbpf ${P}:AMP_POSATTN1.PROC 1', '[iocBoot/common/gmd_dbpf.cmd] dbpf ${P}:AMP_POSATTN2.PROC 1', '[iocBoot/common/gmd_dbpf.cmd] dbpf ${P}:AMP_POSATTN3.PROC 1', '[iocBoot/common/gmd_dbpf.cmd] dbpf ${P}:AMP_POSATTN4.PROC 1', '[iocBoot/common/gmd_dbpf.cmd] dbpf ${P}:MeanCharge:Manual.PROC 1', '[iocBoot/common/gmd_dbpf.cmd] dbpf ${P}:CrossSection:Manual.PROC 1', '']