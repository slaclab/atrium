#!/usr/bin/env python3

import os
import re
import sys
import time
import math
import logging
import argparse
import subprocess
import numpy as np

from epics import caget, caput, camonitor, camonitor_clear, PV

############################################
#            README - HOW TO RUN           #
############################################
# E.g. Run on cpu-b084-sp18 as shown below:
#./atrium --usr_buffs 21 22 23 --usr_buff_samples 10 --sys_buffs SCH1H SCLHH --cpu cpu-b084-sp18 --tpg TPG:SYS0:2

############################################
#             Global variables             #
############################################

# The BSA suffix for the system buffers are a combination of the destination
# suffix with the frequency suffix and the HST string. Example: HSTSCHTH
# The user buffers are just a number as suffix, so we are not using lists or
# dictionaries to represent them.

# SCD = SuperConducting to Diag0
# SCL = SuperConducting to Linac (BSY + HXR + SXR)
# SCB = SuperConducting to SC BSY Dump
# SCH = SuperConducting to Hard x-ray beamline 
# SCS = SuperConducting to Soft x-ray beamline 
system_buff_dest_suffixes = ["SCD", "SCL", "SCB", "SCH", "SCS"]

# Dictionary that relates the frequency rate with the end of the system buffer name
system_buff_freq_suffixes = {"1H": 1, "TH": 10, "HH": 100}

# Types of data/metadata to be stored in BSA PVs
# For now let's comment CNT and RMS because they need special test cases.
#bsa_hst_type_suffixes = ["HST","CNTHST","RMSHST","PIDHST"] 
bsa_hst_type_suffixes = ["HST","PIDHST"] 

# Types of data/metadata to be stored in BSSS PVs
bsss_scalar_type_suffixes = ["","PID"] 

# All types of data/metadata to be stored in BSA/BSSS PVs
acq_type_suffixes = bsa_hst_type_suffixes + bsss_scalar_type_suffixes

# BSA user buffer flag
bsa_usr_buff = False 

# BSA user buffer index (index, 21...49)
bsa_usr_buff_idx = 21

# BSA user buffer rate 
bsa_usr_buff_rate = "1Hz" 

# BSA user buffer samples to acquire
bsa_usr_buff_samples = 1                # initialize to a non-zero value
bsa_usr_buff_samples_num_elem_test = 2  # at least two are needed for a waveform PV

# Wait time for a BSA user buffer to acquire one sample
bsa_usr_buff_wait_time_per_sample = 2 

# BSA user buffer control and settings PVs
bsa_usr_buff_rate_mode_pv  = ""
bsa_usr_buff_ac_rate_pv    = ""
bsa_usr_buff_fixed_rate_pv = ""
bsa_usr_buff_control_pv    = "" 

# BSA user buffer fixed rate flag
bsa_usr_buff_fixed_rate = True 

# BSA user buffer index range
bsa_usr_buff_idx_range = np.arange(21,50)

# BSA user buffer fixed rate options
# Because of roundings, we need to force 71.5kHz to 7.0e+4. PID difference
# returns 13, but the most accurate should be 12.73.
# 1MHz is also forced to 9.1e+5 because the accurate diff would be 0.91,
# but diff comes back as 1.
bsa_usr_buff_fixed_rates  = {"1Hz":1,"10Hz":10,"100Hz":100,"1kHz":1.0e+03,"10kHz":10.0e+03,"71.5kHz":7.0e+04,"1MHz":9.1e+05}

# BSA user buffer AC rate options
bsa_usr_buff_ac_rates = {"0.5Hz":0.5,"1Hz":1,"5Hz":5,"10Hz":10,"30Hz":30,"60Hz":60}

# Wait time to acquire from a system buffer
sys_buff_wait_time = 1 

# BSSS user buffer index range
bsss_usr_buff_idx_range = bsa_usr_buff_idx_range

# BSSS user buffer fixed rate options
bsss_usr_buff_fixed_rates = {"1Hz":1,"10Hz":10,"100Hz":100}

# BSSS data collection format
bsss_usr_buff_acq = False

# Fault buffer suffixes 
flt_buff_suffixes = ["FLTB0","FLTB1","FLTB2","FLTB3"] 

# Holds the specific PV prefix used by the IOC for each signal. Example: TST:SYS2:4:SIGNAL01
service_pv_prefixes = {"BSA": [], "BSSS": [], "BSAS": [], "BLD": []}

# Main beam frequency, assume LCLS-II/SC (910kHz)
core_linac_freq = 910000

# CPU name
cpu = ""

# TPG PV prefix
tpg = ""

# This may be modified by the user
sys_buff_list = []

##  TPG Table Below
##  -------     ------------------------
##  TPG ioc     TPG Prefix 
##  -------     ------------------------ 
##  B34 TPG     GLOBAL=TPG:SYS0:1   (default for B34 TPG and LCLS2 production)
##  B84 TPG     GLOBAL=TPG:SYS0:2
##  B15 TPG     GLOBAL=TPG:B015:1
##  -------     ------------------------

# Logger object - CRITICAL, ERROR, WARNING, INFO, DEBUG
logger = logging.getLogger()
file_handler = logging.FileHandler("logfile.log", mode='w')
file_handler.setLevel(logging.DEBUG)
console_handler = logging.StreamHandler()
console_handler.setLevel(logging.DEBUG)
logger.addHandler(file_handler)
logger.addHandler(console_handler)
logger.setLevel(logging.DEBUG)

#TODO: case when cpu name is wrong
# Pass cpu name as argument
# Make number of bsa items to test an argument

# Variables for storing sampled PV data and status flags
signal_data1 = []
signal_data2 = []

first_collected  = False
second_collected = False

############################################
#           Classes follow below           #
############################################

#************ ARG PARSER Class ************#
class ARG_PARSER:
    """
    
    This class will parse out the arguments.

    """

    def __init__(self):
        """
        Reads command line input info and sets to global variables.
        Info: cpu, tpg, user buffer indices, user buffer indices, user buffer sample number, system buffer list
        """

        # List argument options
        print("Initializing ARG_PARSER\n")
        parser = argparse.ArgumentParser(description='Process test configuration.')
        parser.add_argument('--cpu', dest='cpu', default='cpu-b084-sp18', help='CPU hosting the IOC to test (default: cpu-b084-sp18)')
        parser.add_argument('--tpg', dest='tpg', default='sioc-b084-ts05', help='IOC to test (default: sioc-b084-ts05)')
        parser.add_argument('--usr_buffs', dest='usr_buff_list', nargs='+', default='', help='user buffers to test (default: unspecified for all)')
        parser.add_argument('--sys_buffs', dest='sys_buff_list', nargs='+', default='', help='system buffers to test (default: unspecified for all)')
        parser.add_argument('--usr_buff_samples', dest='usr_buff_samples', default=2, help='user buffer samples to acquire (default for waveform: 2)')
        
        # Parse out arguments
        args = parser.parse_args()
       
        # Set the cpu name
        global cpu
        if args.cpu:
            cpu = args.cpu

        # Set the TPG prefix
        global tpg
        if args.tpg:
            tpg = args.tpg

        # Set the user buffer indices
        global bsa_usr_buff_idx_range,bsss_usr_buff_idx_range
        if args.usr_buff_list:
            bsa_usr_buff_idx_range = args.usr_buff_list
            bsss_usr_buff_idx_range = bsa_usr_buff_idx_range
        
        # Set the user buffer samples for the number of elements test
        global bsa_usr_buff_samples_num_elem_test
        if args.usr_buff_samples:
            bsa_usr_buff_samples_num_elem_test = int(args.usr_buff_samples)

        # Set the system buffers
        global sys_buff_list
        if args.sys_buff_list:
            sys_buff_list = args.sys_buff_list

        print("-----cpu:", cpu) #test
        print("-----tpg:", tpg) #test
        print("-----bsa user buffer index range:", bsa_usr_buff_idx_range) #test
        print("-----bsss user buffer index range", bsss_usr_buff_idx_range) #test
        print("-----bsa user buffer samples:", bsa_usr_buff_samples_num_elem_test) #test
        print("-----sys buffer list", sys_buff_list) #test

#************ CMD_SEEKER Class ************#
class CMD_SEEKER:
    """
    
    This class will look for the st.cmd script.

    """

    def __init__(self):
        print("Initializing CMD_SEEKER\n")

    def get_cmd(self):
        """
        Receives input for cpu and tpg if it does not exist, prompts user to choose IOC to test.
        Gets st.cmd from the IOC

        :return: st.cmd file for the selected IOC
        :rtype: list of strings
        """
        global cpu,tpg
        if cpu == '':
            cpu = input("CPU name where the IOC to be tested is running (e.g. cpu-b084-sp18, etc.):\n")

        if tpg == '':
            tpg = input("TPG PV prefix for the particular test stand (e.g. TPG:SYS0:1,TPG:SYS0:2,etc.):\n")

        #if len(sys.argv) >= 3:
        #    cpu = str(sys.argv[1])
        #    tpg = str(sys.argv[2])
        #elif len(sys.argv) >= 2:
        #    cpu = str(sys.argv[1])
        #    tpg = input("TPG PV prefix for the particular test stand:\n")
        #else:
        #    cpu = input("CPU name where the IOC to be tested is running (e.g. cpu-b084-sp18, etc.):\n")
        #    tpg = input("TPG PV prefix for the particular test stand (e.g. TPG:SYS0:1,TPG:SYS0:2,etc.):\n")

        # Run screen -ls in cpu
        ssh_ls = subprocess.run(["ssh", "laci@" + cpu, "screen -ls"], capture_output=True)
        screen_lines = ssh_ls.stdout.decode()
        # Separate the line breaks from screen -ls
        screen_lines = screen_lines.split("\n")
        print("screen lines:", screen_lines) #test
        
        print("IOCs found running in " + cpu + ":")
        
        iii = 1

        iocs = []
        for line in screen_lines:
            # We look only on lines that have the string ioc
            if "ioc" in line:
                # screen -ls returns with the following format:
                # 2158.sioc-b084-gd02     (Detached)
                ioc = line.split(".")
                ioc = ioc[1].split("\t")
                ioc = ioc[0]
                print ("( " + str(iii) + " ) " + ioc)
                iocs.append(ioc)
                iii += 1
        
        valid_choice = False
        
        while not valid_choice:
            ioc_choice = input("\nChoose the number of the IOC to test: ")
            try:
                ioc = iocs[int(ioc_choice) - 1]
            except:
                print(ioc_choice + " is not a valid number. Try again, please.")
            else:
                valid_choice = True
        print("Please, wait a few seconds, I'm reading the st.cmd file.")
        
        st_cmd_exists = False
        
        ioc_path = os.environ["IOC"] + "/" + ioc + "/iocSpecificRelease/iocBoot/"
        path_exists = os.path.exists(ioc_path)
        if path_exists:
            for root, dirs, files in os.walk(ioc_path):
                for dir in dirs:
                    if dir == ioc:
                        ioc_path = os.path.join(root, dir, "st.cmd")
                        st_cmd_exists = True
        
        if st_cmd_exists:
            # Read the entire st.cmd, expanding sub cmd files
            st_cmd = subprocess.run(["/afs/slac/u/gu/egumtow/scripts/iocsh_lines.sh", ioc_path], capture_output=True)
            st_cmd = st_cmd.stdout.decode().split("\n")
            f = open("stcopy.cmd","w")
            f.write(str(st_cmd))
            f.close()
            return st_cmd
        else:
            print("I'm sorry, I can't seem to find the st.cmd in " + ioc_path)
            print("How is this possible?")
            print("I give up and I'm exiting.")
            exit(1)

#************ CMD_PARSER Class ************#
class CMD_PARSER:
    """
    
    This class will parse the st.cmd script.

    """
    
    def __init__(self):
        print("Initializing CMD_PARSER\n")

    def apply_substitutions(self, line, envSets):
        """
        If macro found in the env value already exists in the env set, replace macro in the env value.

        :param line: the env value to check for macros
        :param envSets: env set with macro definitions
        :return: env value with macros replaced
        :rtype: string
        """
        # Search for ${MACRONAME}
        pattern = "\$\{(\w*)\}"
        macros = re.findall(pattern, line)
        # Search for macros present in the line and replace with data
        # available from the dictionary.
        for macro in macros:
            if macro in envSets:
                value = envSets[macro]
                line = line.replace("${" + macro + "}", value)
        return line

    def extract_service_pv_prefix(self, line, service):
        """
        
        """
        # We are processing a line like
        # dbLoadRecords("db/bsa.db", "DEV=EM2K0:XGMD:HPS,PORT=bsaPort,BSAKEY=YFIXEDPAMC1,SECN=POSY")
        # and want to extract all pairs macro=value present in the line.
        pattern = '[",]?([\w]+)=([\w:]*)[,"]'
        pairs = re.findall(pattern, line)
        dev = secn = ""
        for macro, value in pairs:
            if macro == "DEV":
                dev = value
            if macro == "SECN":
                secn = value

        service_pv_prefixes[service].append(dev + ":" + secn)

    def parse_cmd(self, st_cmd):
        """
                
        """
        envSets = {}
        for line in st_cmd:
            if "epicsEnvSet" in line:
                # Format of epicsEnvSet is
                # epicsEnvSet("ST_CMD"   ,"startup.cmd")
                env_def = line.split("(")
                env_def = env_def[1].split(",")
                env_key = env_def[0].split('"')[1] # example: ST_CMD
                env_value = env_def[1].split('"')[1] # example: startup.cmd
                # Expand macros if they exist
                env_value = self.apply_substitutions(env_value, envSets)
                envSets[env_key] = env_value
            if "bsa.db" in line:
                line = self.apply_substitutions(line, envSets)
                self.extract_service_pv_prefix(line, "BSA")
            if "bsss.db" in line:
                line = self.apply_substitutions(line, envSets)
                self.extract_service_pv_prefix(line, "BSSS")
            if "bsas.db" in line:
                line = self.apply_substitutions(line, envSets)
                self.extract_service_pv_prefix(line, "BSAS")
            if "bld.db" in line:
                line = self.apply_substitutions(line, envSets)
                self.extract_service_pv_prefix(line, "BLD")
        #print(envSets)
        #print(caget(service_pv_prefixes["BSA"][0] + "PIDSCD1H"))
        #print(service_pv_prefixes)
        print("st.cmd reading complete.\n")

#************ BSA_TESTER Class ************#
class BSA_TESTER:
    """
    
    This class will test the BSA buffers.

    """
    
    def __init__(self):
        print("Initializing BSA_TESTER\n")

    def on_monitor_single_sys_buff(self, pv_name=None, value=None, **kw):
        global signal_data1 
        signal_data1 = value
        global first_collected
        first_collected = True

    def on_monitor_pair_sys_buff(self, pv_name=None, value=None, **kw):
        global signal_data1, signal_data2
        global first_collected, second_collected
        if not first_collected:
            signal_data1 = value
            first_collected = True
        elif not second_collected:
            signal_data2 = value
            second_collected = True
        else:
            signal_data1 = signal_data2
            signal_data2 = value

    def on_monitor_single_usr_buff(self, pv_name=None, value=None, **kw):
        if not first_collected:
            global signal_data1 
            signal_data1 = value

    def on_monitor_consec_scalar_usr_buff(self, pv_name=None, value=None, **kw):
        global signal_data1 
        signal_data1.append(value)

    def on_monitor_pair_usr_buff(self, pv_name=None, value=None, **kw):
        if not first_collected:
            global signal_data1 
            signal_data1 = value
        elif not second_collected:
            global signal_data2
            signal_data2 = value

    def get_pv_data_single(self, pv_name):
        # Prepare global variables for write access 
        global signal_data1
        signal_data1 = []
        global first_collected
        first_collected = False
        if not bsa_usr_buff:
            # System buffer
            pv = PV(pv_name)
            pv.wait_for_connection(timeout=None)
            if np.array(pv.value).size > 0:
                # Scalar/Waveform PV
                cb=pv.add_callback(callback=self.on_monitor_single_sys_buff)
                while (not first_collected):
                    time.sleep(sys_buff_wait_time)
                pv.remove_callback(cb) 
                print("Reading sample --> "+str(signal_data1))
            else:
                # Empty PV
                print("PV is empty!!")
                return
        elif bsa_usr_buff:
            # Trigger BSA data acquisition
            if bsss_usr_buff_acq:
                signal_data1 = []
                camonitor(pv_name, callback=self.on_monitor_consec_scalar_usr_buff)
            else:
                camonitor(pv_name, callback=self.on_monitor_single_usr_buff)
            self.trigger_user_buffer(bsa_usr_buff_rate_mode_pv, bsa_usr_buff_fixed_rate_pv, \
                                     bsa_usr_buff_ac_rate_pv, bsa_usr_buff_control_pv)
            print("Acquiring new sample...")
            time.sleep(bsa_usr_buff_wait_time_per_sample * bsa_usr_buff_samples)
            print("Reading sample --> "+str(signal_data1))
            # Clear camonitor
            camonitor_clear(pv_name)
            # Reset BSA user buffer
            self.reset_user_buffer(bsa_usr_buff_rate_mode_pv, bsa_usr_buff_fixed_rate_pv, \
                                   bsa_usr_buff_ac_rate_pv, bsa_usr_buff_control_pv)

    def get_pv_data_pair(self, pv_name): 
        # Prepare global variables for write access
        global signal_data1, signal_data2
        global first_collected, second_collected
        signal_data1 = []
        signal_data2 = []
        first_collected = second_collected = False
        if not bsa_usr_buff:
            # System buffer
            pv = PV(pv_name)
            pv.wait_for_connection(timeout=None)
            if np.array(pv.value).size > 0:
                # Scalar/Waveform PV
                cb=pv.add_callback(callback=self.on_monitor_pair_sys_buff)
                while (not first_collected) or (not second_collected):
                    time.sleep(sys_buff_wait_time)
                pv.remove_callback(cb) 
                print("First sample   --> "+str(signal_data1))
                print("Second sample  --> "+str(signal_data2))
            else:
                # Empty PV
                print("PV is empty!!")
                return
        elif bsa_usr_buff:
            # Trigger BSA data acquisition
            camonitor(pv_name, callback=self.on_monitor_pair_usr_buff)
            self.trigger_user_buffer(bsa_usr_buff_rate_mode_pv, bsa_usr_buff_fixed_rate_pv, \
                                     bsa_usr_buff_ac_rate_pv, bsa_usr_buff_control_pv)
            print("Acquiring first sample...")
            while np.array(signal_data1).size < bsa_usr_buff_samples: 
               time.sleep(bsa_usr_buff_wait_time_per_sample * bsa_usr_buff_samples)
               if (bsss_usr_buff_acq and np.array(signal_data1).size == 1):
                   break
            first_collected = True
            print("First sample   --> "+str(signal_data1))
            # Trigger second BSA data acquisition
            self.trigger_user_buffer(bsa_usr_buff_rate_mode_pv, bsa_usr_buff_fixed_rate_pv, \
                                     bsa_usr_buff_ac_rate_pv, bsa_usr_buff_control_pv)
            print("Acquiring second sample...")
            while np.array(signal_data2).size < bsa_usr_buff_samples: 
               time.sleep(bsa_usr_buff_wait_time_per_sample * bsa_usr_buff_samples)
               if (bsss_usr_buff_acq and np.array(signal_data2).size == 1):
                   break
            second_collected = True
            print("Second sample  --> "+str(signal_data2))
            # Clear camonitor
            camonitor_clear(pv_name)
            # Reset BSA user buffer
            self.reset_user_buffer(bsa_usr_buff_rate_mode_pv, bsa_usr_buff_fixed_rate_pv, \
                                   bsa_usr_buff_ac_rate_pv, bsa_usr_buff_control_pv)
            print()

    def compute_waveform_PID_update_rate(self, pv_name):
        ppid = signal_data1[0]
        pids = signal_data1[1:]
        pdiff = pids[0] - ppid
        for pid in pids:
            diff = pid - ppid
            if np.not_equal(diff, pdiff):
                logger.error("[ERROR] -    In " + pv_name + " the PID diffs are not consistent between elements")
                logger.error("             Please make sure that sampling of data is done at consistent intervals.")
                return -1
            ppid = pid
        return pdiff
    
    def compute_scalar_PID_update_rate(self):
        ppid = signal_data1
        pid  = signal_data2
        return pid - ppid

    def compare_waveform_PID_update_rate(self, pv_name, diff):
        sys_buff_match = [k for k in list(system_buff_freq_suffixes.keys()) if k in pv_name]
        if sys_buff_match and not bsa_usr_buff:
            # We have a system buffer, extract update rate from name
            pv_update_rate  = system_buff_freq_suffixes[sys_buff_match[0]] 
            pid_update_rate = core_linac_freq / diff
            if not np.equal(pid_update_rate, pv_update_rate):
                logger.error("[ERROR] -    " + pv_name + " the PID update rate (" + str(pid_update_rate) + \
                "Hz) doesn't match the PV update rate of " + str(pv_update_rate) + "Hz")
                logger.error("             Please make sure that sampling of data is done at consistent intervals.")
            else:
                print("PID Update Rate:             OK  (" + str(pid_update_rate) + "Hz)")
        elif bsa_usr_buff:
            # We have a user buffer, extract update rate from buffer rate dictionary
            if bsa_usr_buff_fixed_rate:
                pv_update_rate  = bsa_usr_buff_fixed_rates[bsa_usr_buff_rate]
            else:    
                pv_update_rate  = bsa_usr_buff_ac_rates[bsa_usr_buff_rate]
            pid_update_rate = core_linac_freq / diff
            if not np.equal(pid_update_rate, pv_update_rate):
                logger.error("[ERROR] -    " + pv_name + " the PID update rate (" + str(pid_update_rate) + \
                "Hz) doesn't match the PV update rate of " + str(pv_update_rate) + "Hz")
                logger.error("             Please make sure that sampling of data is done at consistent intervals.")
            else:
                print("PID Update Rate:             OK  (" + str(pid_update_rate) + "Hz)")

    def compare_scalar_PID_update_rate(self, pv_name, diff):
        self.compare_waveform_PID_update_rate(pv_name, diff)

    def check_pair_for_packed_pv_data(self, pv_name):
        # Check if both samples are populated with data
        if (                                                                                                     \
             (isinstance(signal_data1, (list, tuple, np.ndarray)) and (len(signal_data1) == 0))               or \
             (isinstance(signal_data2, (list, tuple, np.ndarray)) and (len(signal_data2) == 0))               or \
             (not isinstance(signal_data1, (list, tuple, np.ndarray)) and (np.array(signal_data1).size == 0)) or \
             (not isinstance(signal_data2, (list, tuple, np.ndarray)) and (np.array(signal_data2).size == 0))):
            logger.error("[ERROR] -    " + pv_name + " didn't bring any data (empty).")
            logger.error("             Is BSA working?")
        else:
            print("PV Populated With Data:      OK")

    def check_pair_for_diff_pv_data(self, pv_name):
        # Check if the bsa buffers changed in time.
        if np.array_equal(np.array(signal_data1), np.array(signal_data2)) and np.array(signal_data1).size != 0:
            logger.critical("[CRITICAL] - " + pv_name + " is not updated with new values.")
            logger.critical("             Sampling too fast or is the PV value constant?")
        else:
            print("Pair Of Samples Diff:        OK")
            
    def check_pv_for_updated_data(self, pv_name):
        # Check to see if we always get the same value in the latest sample 
        if (isinstance(signal_data2, (list, tuple, np.ndarray)) and (np.array(signal_data2) == np.array(signal_data2)[-1]).all()) or \
           (not isinstance(signal_data2, (list, tuple, np.ndarray)) and (np.array(signal_data2) == np.array([signal_data2])[-1]).all()):
            logger.warning("[WARNING]  - " + pv_name + " keeps the same value over time.")
            logger.warning("             Is IOC triggering the firmware correctly?")
        else:
            print("PV Updated With New Data:    OK")

    def check_pv_for_nan_data(self, pv_name):
        # Check for at least one NaN value
        if np.isnan(np.sum(signal_data1)) or np.isnan(np.sum(signal_data2)):
            logger.error("[ERROR]    - " + pv_name + " contains NaN values.")
        else:
            print("PV Does Not Have NaNs:       OK")

    def check_waveform_signal_change_in_time(self, pv_name):
        # Sample PV data
        self.get_pv_data_pair(pv_name)
        # Check for NaN values
        self.check_pv_for_nan_data(pv_name)
        # Check if both samples are populated with data
        self.check_pair_for_packed_pv_data(pv_name)
        # Check if the bsa buffers changed in time.
        self.check_pair_for_diff_pv_data(pv_name)
        # Check to see if we always get the same value in the latest sample 
        self.check_pv_for_updated_data(pv_name)
    
    def check_scalar_signal_change_in_time(self, pv_name):
        # Sample PV data
        self.get_pv_data_pair(pv_name)
        # Check for NaN values
        self.check_pv_for_nan_data(pv_name)
        # Check if both samples are populated with data
        self.check_pair_for_packed_pv_data(pv_name)
        # Check if the bsa buffers changed in time.
        self.check_pair_for_diff_pv_data(pv_name)
    
    def check_waveform_PID_update_rate(self, pv_name):
        if "PID" in pv_name and "HST" in pv_name:
            # Sample PID PV data
            self.get_pv_data_single(pv_name)
            # Extract PID update rate
            rate = self.compute_waveform_PID_update_rate(pv_name)
            # Compare with expected PID update rate
            self.compare_waveform_PID_update_rate(pv_name, rate)
    
    def check_scalar_PID_update_rate(self, pv_name):
        if "PID" in pv_name and "HST" not in pv_name:
            if not bsa_usr_buff:
                # Sample PID PV data
                self.get_pv_data_pair(pv_name)
                # Extract PID update rate
                rate = self.compute_scalar_PID_update_rate() 
                # Compare with expected PID update rate
                self.compare_scalar_PID_update_rate(pv_name, rate)
            elif bsa_usr_buff:
                # To verify PID rate, get one waveform sample with consecutive PIDs
                self.get_pv_data_single(pv_name)
                # Extract PID update rate
                rate = self.compute_waveform_PID_update_rate(pv_name)
                # Compare with expected PID update rate
                self.compare_waveform_PID_update_rate(pv_name, rate)

    def check_number_of_elements_usr_buff_waveform(self, pv_name, samples):
        # Sample PV data
        self.get_pv_data_single(pv_name)
        # Compare number of elements
        if np.array(signal_data1).size > samples:
            logger.error("[ERROR]    - " + pv_name + " contains more than the expected number of elements.")
        elif np.array(signal_data1).size < samples:
            logger.error("[ERROR]    - " + pv_name + " contains fewer than the expected number of elements.")
        else:
            print("PV number of elements:       OK (" + str(np.array(signal_data1).size) + ")")
    
    def check_number_of_elements_usr_buff_scalar(self, pv_name, samples):
        # Sample PV data
        self.get_pv_data_single(pv_name)
        # Compare number of elements
        if np.array(signal_data1).size > 1:
            logger.error("[ERROR]    - " + pv_name + " contains more than the expected number of elements.")
        elif np.array(signal_data1).size < 1:
            logger.error("[ERROR]    - " + pv_name + " contains fewer than the expected number of elements.")
        elif np.array(signal_data1).size == 1:
            print("PV number of elements:       OK (" + str(np.array(signal_data1).size) + ")")

    def trigger_user_buffer(self, rate_mode_pv, fixed_rate_pv, ac_rate_pv, control_pv):
        # Trigger BSA data acquisition
        caput(control_pv, "OFF", wait=True)
        caput(control_pv, "ON", wait=True)

    def reset_user_buffer(self, rate_mode_pv, fixed_rate_pv, ac_rate_pv, control_pv):
        # Reset buffer rate and control settings
        caput(rate_mode_pv, "Fixed Rate", wait=True)
        caput(fixed_rate_pv, list(bsa_usr_buff_fixed_rates.keys())[0], wait=True)
        caput(ac_rate_pv, list(bsa_usr_buff_ac_rates.keys())[0], wait=True)
        caput(control_pv, "OFF", wait=True)

    def prep_user_buffer(self, index, rate=list(bsa_usr_buff_fixed_rates.keys())[0], fixed_rate=True, samples=1):
        # Assign global user buffer index
        global bsa_usr_buff_idx
        bsa_usr_buff_idx = index
        # Assign global user buffer rate
        global bsa_usr_buff_rate
        bsa_usr_buff_rate = rate
        # Assign global user buffer fixed rate flag
        global bsa_usr_buff_fixed_rate
        bsa_usr_buff_fixed_rate = fixed_rate
        # Assign global user buffer samples to acquire
        global bsa_usr_buff_samples
        bsa_usr_buff_samples = samples
        # Assign global user buffer control and settings PVs
        global bsa_usr_buff_rate_mode_pv
        global bsa_usr_buff_ac_rate_pv
        global bsa_usr_buff_fixed_rate_pv
        global bsa_usr_buff_control_pv
        # Get PVs to control and settings
        bsa_buff_prefix=tpg.replace('TPG','BSA',1)    
        control_pv = bsa_buff_prefix + ':' + str(bsa_usr_buff_idx) + ':CTRL'
        meascnt_pv = bsa_buff_prefix + ':' + str(bsa_usr_buff_idx) + ':MEASCNT'
        rate_mode_pv = bsa_buff_prefix + ':' + str(bsa_usr_buff_idx) + ':RATEMODE'           
        ac_rate_pv = bsa_buff_prefix + ':' + str(bsa_usr_buff_idx) + ':ACRATE'           
        fixed_rate_pv = bsa_buff_prefix + ':' + str(bsa_usr_buff_idx) + ':FIXEDRATE'
        # Assign control and others settings to global PVs too
        bsa_usr_buff_rate_mode_pv = rate_mode_pv
        bsa_usr_buff_ac_rate_pv = ac_rate_pv
        bsa_usr_buff_fixed_rate_pv = fixed_rate_pv
        bsa_usr_buff_control_pv = control_pv
        # Set the update rate in the user buffer in TPG
        if bsa_usr_buff_fixed_rate:
            caput(rate_mode_pv, "Fixed Rate", wait=True)
            caput(fixed_rate_pv, rate, wait=True)
        else:
            caput(rate_mode_pv, "AC Rate", wait=True)
            caput(ac_rate_pv, rate, wait=True)
        # Assign number of samples
        caput(meascnt_pv, str(samples), wait=True)
    
    def core_test_system_buffers(self, signal_pvs, variable_type_suffixes, fcn_check_signal_change_in_time, fcn_check_PID_update_rate):
        """
        For all combinations of destination and frequencies for system buffers, test two functions:
        - Signal is changing over time
        - PID changes as expected
    
        :param signal_pvs: 
        :param variable_type_suffixes:
        :param fcn_check_signal_change_in_time:
        :param fcn_check_PID_update_rate:
         """
        print("signal pvs--------:",signal_pvs)
        for dest_suffix in system_buff_dest_suffixes:
            for freq_suffix, freq in system_buff_freq_suffixes.items():
                
                # Check if the user requested a subset of system buffers to test
                proceed = False
                for k in sys_buff_list:
                    if not proceed:
                        proceed = k in (dest_suffix + freq_suffix)
                        
                if proceed or sys_buff_list == []:
                    print("\n--------------")
                    print("Testing " + dest_suffix + freq_suffix) 
                    print("--------------")

                    for signal_pv in signal_pvs:
                        for var_type in variable_type_suffixes: 
                            # Form the PV name
                            pv = signal_pv + var_type + dest_suffix + freq_suffix
                            print("\n*****<< " + pv + " >>*****\n")
                       
                            # Start running tests for PV
                            # Test 1: check for signal change over time
                            fcn_check_signal_change_in_time(pv_name=pv)
                        
                            # Test 2: check if the PID changes as expected (for a PID-type PV only)
                            if "PID" in pv:
                                print("\nChecking PID rate:\n")
                                fcn_check_PID_update_rate(pv_name=pv) 

    def core_test_user_buffers(self, signal_pvs, variable_type_suffixes, usr_buff_idx_range, usr_buff_fixed_rates, fcn_check_signal_change_in_time, fcn_check_PID_update_rate, fcn_check_number_of_elements, samples, bsss):
        # Set BSA user buffer flag
        global bsa_usr_buff
        bsa_usr_buff = True
        
        # Set BSSS user buffer acq flag
        global bsss_usr_buff_acq
        bsss_usr_buff_acq = bsss 
        
        # Main loop to process all user buffer PVs
        for idx in usr_buff_idx_range:
            print("\n------------------------")
            print("Testing User Buffer " + str(idx))
            print("------------------------")
            for signal_pv in signal_pvs:
                for var_type in variable_type_suffixes:
                    # Form the PV name
                    pv = signal_pv + var_type + str(idx)
                    print("\n*****<< " + pv + " >>*****\n")
                       
                    # Test 1: check for signal change over time
                    self.prep_user_buffer(idx, samples=samples)
                    fcn_check_signal_change_in_time(pv_name=pv)
                        
                    # Test 2: check if the PID changes as expected (for a PID-type PV only)
                    if "PID" in pv:
                        print("\nChecking PID rate:\n")
                        for rate in usr_buff_fixed_rates.keys():
                            print("Fixed Rate = " + rate)
                            if bsss:
                                self.prep_user_buffer(idx, rate, samples=2)
                            else:
                                self.prep_user_buffer(idx, rate, samples=samples)
                            fcn_check_PID_update_rate(pv_name=pv)

#                        for rate in bsa_usr_buff_ac_rates.keys():
#                            print("AC    Rate = " + rate)
#                            if bsss:
#                                self.prep_user_buffer(idx, rate, fixed_rate=False, samples=2)
#                            else:
#                                self.prep_user_buffer(idx, rate, fixed_rate=False, samples=samples)
#                            fcn_check_PID_update_rate(pv_name=pv)
                    
                    # Test 3: check if the acquired number of samples matches what is expected
                    self.prep_user_buffer(idx, samples=samples)
                    fcn_check_number_of_elements(pv_name=pv, samples=samples)
   
        bsa_usr_buff      = False 
        bsss_usr_buff_acq = False 

    def core_test_fault_buffers(self, signal_pvs, variable_type_suffixes, flt_buff_name_suffixes, fcn_check_signal_change_in_time):
        for signal_pv in signal_pvs:
            print("\n---------------------------------------------")
            print("Testing " + " for " + signal_pv)
            print("---------------------------------------------")
            for var_type in variable_type_suffixes:
                for flt_idx_suffix in flt_buff_name_suffixes:
                    # Form the PV name
                    pv = signal_pv + var_type + flt_idx_suffix
                    print("\n*****<< " + pv + " >>*****\n")
                       
                    # Test 1: check for signal change over time
                    fcn_check_signal_change_in_time(pv)

    def test_bsa_system_buffers(self):
        """
        Check BSA system buffers. 
        """
        print("Checking BSA system buffers.")
        list_of_signal_pvs = service_pv_prefixes["BSA"]
        self.core_test_system_buffers(list_of_signal_pvs, bsa_hst_type_suffixes, \
        self.check_waveform_signal_change_in_time, self.check_waveform_PID_update_rate) 

    def test_bsss_system_buffers(self):
        print("Checking BSSS system buffers.")
        list_of_signal_pvs = service_pv_prefixes["BSSS"]
        self.core_test_system_buffers(list_of_signal_pvs, bsss_scalar_type_suffixes, \
        self.check_scalar_signal_change_in_time, self.check_scalar_PID_update_rate) 
    
    def test_bsa_user_buffers(self):
        print("Checking BSA user buffers.")
        list_of_signal_pvs = service_pv_prefixes["BSA"]
        self.core_test_user_buffers(list_of_signal_pvs, bsa_hst_type_suffixes, \
        bsa_usr_buff_idx_range, bsa_usr_buff_fixed_rates, \
        self.check_waveform_signal_change_in_time, self.check_waveform_PID_update_rate, \
        self.check_number_of_elements_usr_buff_waveform, samples=bsa_usr_buff_samples_num_elem_test, bsss=False) 
    
    def test_bsss_user_buffers(self):
        print("Checking BSSS user buffers.")
        list_of_signal_pvs = service_pv_prefixes["BSSS"]
        self.core_test_user_buffers(list_of_signal_pvs, bsss_scalar_type_suffixes, \
        bsss_usr_buff_idx_range, bsss_usr_buff_fixed_rates, \
        self.check_scalar_signal_change_in_time, self.check_scalar_PID_update_rate, \
        self.check_number_of_elements_usr_buff_scalar, samples=1, bsss=True) 
    
    def test_bsa_fault_buffers(self):
        print("Checking BSA fault buffers.")
        list_of_signal_pvs = service_pv_prefixes["BSA"]
        self.core_test_fault_buffers(list_of_signal_pvs, bsa_hst_type_suffixes, \
        flt_buff_suffixes, self.check_waveform_signal_change_in_time) 
    
    def test_bsss_fault_buffers(self):
        print("Checking BSSS fault buffers - There are no BSSS fault buffers.")
        print("                              Nothing else to do here. Moving on.")
    
############################################
#         __main__ block goes here         #
############################################
if __name__ == "__main__":
   
    # Create an arg parser object for user input 
    argparse = ARG_PARSER()

    # Create a seeker object for .cmd files
    seeker = CMD_SEEKER()
    cmd = seeker.get_cmd()
    
    # Create a parser object for .cmd files
    parser = CMD_PARSER()
    parser.parse_cmd(cmd)
     
    # Create a tester object for BSA buffers
    tester = BSA_TESTER()

    tester.test_bsa_system_buffers  ()
#    tester.test_bsss_system_buffers ()
    
#    tester.test_bsa_user_buffers    ()
#    tester.test_bsss_user_buffers   ()
    
#    tester.test_bsa_fault_buffers   ()
#    tester.test_bsss_fault_buffers  () 
